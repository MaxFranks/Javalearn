Java学习笔记20180818

冒泡排序：
		for(int x = 0; x < ns.length; x++) {
			for(int y = x+1;y < ns.length; y++) {
				int tmp;
				if(ns[x] > ns[y]) {
					tmp = ns[y];
					ns[y] = ns[x];
					ns[x] = tmp;
				}
			}
		}
对一组数组，进行从小到大的排序。先取第一位，然后和后面的每位数依次对比，小的留住，再取第二位，和后面的数对比，小的留住。以此类推，最后会修改数组本身，变成一个从小到大排序的数组。

构造方法：
构造方法可以在创建对象实例时候初始化对象实例，构造方法名就是类名，构造方法的参数没有限制，构造方法也没有返回值和void，必须用new操作符调用构造方法。
构造方法如果没写，编译器会自动生成一个默认构造方法，无参数，无执行语句，如果用户自定义了构造方法，编译器就不再自动创建默认构造方法。
可以在一个构造方法里面调用其他构造方法，用this调用。
public class PersonDemo {
	private String name;
	private int age;
	private double height;
	public PersonDemo(String name,int age,double height) {
		this.name = name;
		this.age = age;
		this.height = height;
		System.out.println("my name is " + name + " and " + age + " years old and " + height +"cm");
	}
	public PersonDemo() {
		this("UnKnown",18,170.00);
	}
}

方法重载和方法覆写区别：
就是overload和override
方法重载overload，指的是多个方法的方法名相同但是各自的参数不同。返回值通常都是相同的。方便调用相同功能的方法，细节不一样。
下面是方法重载的一个体现。要设置一个人的姓名，可以设置完整的，也可以设置姓，名。
	public void setName(String name) {
		this.name = name;
	}
	public void setName(String FirstName,String LastName) {
		this.name = FirstName + " " + LastName;
	}
override方法覆写，一般是指子类覆写父类的方法，如果方法的签名不同，那就不是override，是创建了一个新的方法。

继承方法:
父类的private字段是私有的，子类无法直接用this访问，如果想子类访问，把private属性修改为protected属性。
子类的构造方法的第一行语句必须调用super。如果没有super，就是父类没有自定义的构造方法，只有默认的super，那子类的super也会自动生成。如果父类有自定义的构造方法，那么子类的就必须显示的调用父类的构造方法。

abstract类和interface接口。
抽象类，指的就是类中有抽象方法，没有实现代码，只有一个方法名，他的子类都有这个方法，但是具体的实现代码是不一样的，比如人有跑这个动作，那么学生可以跑，老师可以跑，医生也可以跑，那么跑这个动作，在人的类中，就可以定义为一个抽象类，不用写实现代码，只需要方法名，子类继承父类之后，会写不同的实现代码，新建对象的时候，父类创建之后指向不同的子类实例就好了，就是new学生，老师，医生等。一个抽象类只有抽象方法的时候，没有其他代码，那么他就可以是一个接口。接口可以定于default方法，这个方法可以return一个0，还有就是implements这个接口之后，可以不用这个方法。可以implements多个interface。而abstract用来继承的时候，只能单继承，就是extends一个class。比如student extends了person，那他就不能extends其他class，但是如果person是interface，那他就可以implements多个interface。interface之间也可以继承自另一个interface，就是用extends，相当于扩展了接口的方法。
我们需要合理设计interface和abstract class的关系，一般把公共的业务逻辑放在abstract class，接口层次代表抽象程度。

静态字段和方法：
如果我们用static修饰一个字段，那么这个字段就成为静态字段，普通字段在每个实例中都有自己独立的一个空间，静态字段只有一个共享空间，所有实例都共享该字段。
例如有一个person类，实例有2个，小明和小红，他们都有name和age字段，那么这两个字段在自己的实例中，都有各自的储存空间。而static的字段比如number，则是共享的一个存储空间。可以理解为所有实例共享的是其实是person类的number字段，就是class本身的字段。所以我们推荐用类名来访问静态字段，而不是用实例变量来访问静态字段。比如要修改number的值。应该使用person.number来访问修改，而不是实例xiaohong.number或者xiaoming.bumber。
调用实例方法必须通过实例变量，比如xiaohong.act，但是调用静态方法，不需要实例变量，直接用类名就可以，比如person.act。
静态方法不能访问this变量，因为他根本不需要实例变量，也不能访问实例字段，可以访问静态字段。
静态方法通常用于工具类，比如arrays.sort，math.random，也常用于辅助方法。

java核心类：
string类：
contains方法，返回是否包含子串。indexof方法，返回指定字符串的索引位置。lastindexof和indexof类似，不过他是从末尾开始找。startswith返回是否某个字符串开始，类似endswith是否某个字符串结束。
trim方法可以移除首位空白字符，比如空格，\t,\r,\n。这里的trim方法，不改变字符串的内容，而是返回新字符串。
还可以用substring方法提取子串，同样也没有改变字符串内容。 
还有touppercase，tolowercase，大小写转换。
还有replace方法，用‘和“区分，分别代表替换一个字符，或者一串字符。replaceall是用正则表达式来替换字符串。
split分割字符串，jion拼接字符串。
要把任意数据转换为string，可以使用提供的valueof方法，可以传入int，boolean，object。
如果要把string转换为其他类型，可以使用static int integer.parseint（string），或者static integer integer.valueof（string）。这里要注意string是不可变类型，当我们调用tochararray的时候，其实复制了一遍char数组，所以我们修改返回后的char数组，不会影响到原来的string数组。
需要把string转为byte【】时候，可以用byte【】 getbyte（string），这里string就是编码格式，比如utf-8。
把一个int转换为integer。或者一个string转换为int。
Integer n1 = Integer.valueOf(100),Integer n1 = Integer.valueOf("100")
integer转换为int。int a1 = n1.intValue()


8月31号定的学习目标，把异常处理-断言和日志复习一遍，接着复习单元测试，maven，接着是jdbc。trycatch。

断言：断言是一种调试方式，断言失败会抛出assertionerror，只能在开发和测试阶段启用断言，对可恢复的错误不能使用断言，而应该抛出异常，断言很少被使用，更好的方法是编写单元测试。
double x = abs(-123.45);//自定义一个abs方法为取绝对值。
assert x >= 0 : "x must >= 0 but x = " +x;//因为这里x取了绝对值，所以都能通过，没有异常，如果x是负数，就会触发assertion异常。
Java的日志：logging，为了取代sysout方法，可以设置输出样式，级别，禁止输出某些级别，可以被重定向到文件，可以按包名控制级别。sysout无法做到这些。
jdk内置了java.util.logging，但是这个日志系统用的很少，更常用的是commonslogging。


io简介：
input指从外部读入数据到内存，例如，读文件，从网络读取等。为什么要把数据读入到内存中去呢？因为代码是在内存中运行的。
从代码来看，就是。
byte[] data = new byte[1024];
read(data);
process(data);
output和input相反，是把数据从内存输出到外部，例如，写文件，输出到网络。

io流是一种顺序读写数据的模式，其表现如下，
1数据是单向流动的。2以byte为最小单位（字节流）。
二进制数据以byte为最小单位在inputstream和outputstream中单向流动。

如果字符不是单字节表示的ascii：
Java提供了reader和writer表示字符流，字符流传输的最小数据单位是char，字符流输出的byte取决于编码方式。
字符数据以char为最小单位在reader和writer中单向流动。

如果数据源不是文本，只能使用inputstream，如果是文本，使用reader更方便一些。

同步io：读写io时候代码等数据返回后才继续执行后续代码，代码编写简单，cpu执行效率低。
异步io：读写io时候仅发出请求，然后立刻执行后续代码，代码编写复杂，cpu执行效率高。
jdk提供的java.io是同步io，java.nio是异步io。

file对象：
创建file对象本身不涉及io操作，
获取路径，绝对路径，规范路径，/getpath/getabsolutepath/getcanonicalpath
可以获取目录的文件和子目录。
通过file对象可以创建或删除文件或目录。

inputstream：
java.io.inputstream是所有输入类的超类。
abstract int read：读取下一个字节，并返回字节（0～255），如果已经读到末尾，返回-1。
int read(byte[] b)：读取若干字节并填充到byte[]数组，返回读取到字节数。
int read(byte[],int off,int len)：指定byte[]数组的偏移量和最大填充数。
void close（），关闭输入流。
outputstream:
java.io.outputStream是所有输出流的超类。
abstract write（int b）：写入一个字节。
void write（byte[] b）写入byte[]数组的所有字节。
void write(byte[] b,int off,int len)写入byte[]数组指定范围内的字节。
void close（）：关闭输出流。
void flush（）：将缓冲区的内容输出。

inputstream是输入流，就是把数据放到内存里面，然后处理，比如给用户看，读数据。outputstream就是输出流，把数据从内存取出来用，比如写文档，写数据。